---
import Layout from "../../layouts/Layout.astro";
import RichText from "../../components/RichText.astro";

import { findAll } from "../../api";
import type { Post } from "@/payload/payload-types";
import type {
  FormattedElement,
  FormattedText,
} from "@/payload/rich-text-export";


const postsFound: Post[] = await findAll(Astro.params.slug);

  

if (postsFound.length === 0) {
  return new Response(JSON.stringify(postsFound), {
    status: 404,
    statusText: "Not found",
  });
}

const post = postsFound[0];
console.log("ðŸš€ ~ file: [slug].astro:24 ~ post", post);
const content = post?.content as (FormattedElement | FormattedText)[];






// if (!post) {
// return new Response(JSON.stringify(post), {
//   status: 404,
//   statusText: "Not found",
//  });
// }



---

<Layout title={post?.title || ""}>
  <main>
    <h1>{post?.title}</h1>
    {content && <RichText richText={content} />}
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
